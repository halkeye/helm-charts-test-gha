# Default values for mautrix-hangouts.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

strategy:
  type: Recreate
  rollingUpdates: null

image:
  repository: dock.mau.dev/tulir/mautrix-hangouts
  tag: latest
  pullPolicy: Always

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # privileged: true
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  externalTrafficPolicy:
  type: ClusterIP
probes:
  liveness:
    failureThreshold: 5
    periodSeconds: 10
  readiness:
    failureThreshold: 5
    periodSeconds: 10
  startup:
    initialDelaySeconds: 5
    failureThreshold: 30
    periodSeconds: 10

ingress:
  enabled: false
  ## ingress.ingressClassName -- Support for ingress class name that was introduced in kubernetes 1.19
  ingressClassName:
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

podAnnotations: {}

deploymentAnnotations: {}

config:
  homeserver:
    # The address that this appservice can use to connect to the homeserver.
    address: https://matrix.org
    # The domain of the homeserver (for MXIDs, etc).
    domain: matrix.org
    # Whether or not to verify the SSL certificate of the homeserver.
    # Only applies if address starts with https://
    verify_ssl: true

  # Application service host/registration related details
  # Changing these values requires regeneration of the registration.
  appservice:
    # The address that the homeserver can use to connect to this appservice.
    address: http://localhost:29320

    # The hostname and port where this appservice should listen.
    hostname: 0.0.0.0
    port: 29320
    # The maximum body size of appservice API requests (from the homeserver) in mebibytes
    # Usually 1 is enough, but on high-traffic bridges you might need to increase this to avoid 413s
    max_body_size: 1

    # The full URI to the database. SQLite and Postgres are fully supported.
    # Other DBMSes supported by SQLAlchemy may or may not work.
    # Format examples:
    #   SQLite:   sqlite:///filename.db
    #   Postgres: postgres://username:password@hostname/dbname
    database: sqlite:///mautrix-hangouts.db

    # The unique ID of this appservice.
    id: hangouts
    # Username of the appservice bot.
    bot_username: hangoutsbot
    # Display name and avatar for bot. Set to "remove" to remove display name/avatar, leave empty
    # to leave display name/avatar as-is.
    bot_displayname: Hangouts bridge bot
    bot_avatar: mxc://maunium.net/FBXZnpfORkBEruORbikmleAy

    # Community ID for bridged users (changes registration file) and rooms.
    # Must be created manually.
    community_id: null

    # Authentication tokens for AS <-> HS communication. Autogenerated; do not modify.
    as_token: ""
    hs_token: ""

  # Bridge config
  bridge:
    # Localpart template of MXIDs for Hangouts users.
    # {userid} is replaced with the user ID of the Hangouts user.
    username_template: "hangouts_{userid}"
    # Displayname template for Hangouts users.
    # {full_name} and {first_name} are replaced with names.
    displayname_template: "{full_name} (Hangouts)"
    # Localpart template for per-user room grouping community IDs.
    # The bridge will create these communities and add all of the specific user's portals to the community.
    # {localpart} is the MXID localpart and {server} is the MXID server part of the user.
    #
    # `hangouts_{localpart}={server}` is a good value.
    community_template: null

    # The prefix for commands. Only required in non-management rooms.
    command_prefix: "!hg"

    # Number of chats to sync (and create portals for) on startup/login.
    # Set 0 to disable automatic syncing.
    initial_chat_sync: 10
    # Whether or not the Hangouts users of logged in Matrix users should be
    # invited to private chats when the user sends a message from another client.
    invite_own_puppet_to_pm: false
    # Whether or not to use /sync to get presence, read receipts and typing notifications when using
    # your own Matrix account as the Matrix puppet for your Hangouts account.
    sync_with_custom_puppets: true
    # Shared secret for https://github.com/devture/matrix-synapse-shared-secret-auth
    #
    # If set, custom puppets will be enabled automatically for local users
    # instead of users having to find an access token and run `login-matrix`
    # manually.
    login_shared_secret: null
    # Whether or not to update avatars when syncing all contacts at startup.
    update_avatar_initial_sync: true
    # End-to-bridge encryption support options. These require matrix-nio to be installed with pip
    # and login_shared_secret to be configured in order to get a device for the bridge bot.
    #
    # Additionally, https://github.com/matrix-org/synapse/pull/5758 is required if using a normal
    # application service.
    encryption:
      # Allow encryption, work in group chat rooms with e2ee enabled
      allow: false
      # Default to encryption, force-enable encryption in all portals the bridge creates
      # This will cause the bridge bot to be in private chats for the encryption to work properly.
      default: false

    # Public website and API configs
    web:
      # Auth server config
      auth:
        # Publicly accessible base URL for the login endpoints.
        # The prefix below is not implicitly added. This URL and all subpaths should be proxied
        # or otherwise pointed to the appservice's webserver to the path specified below (prefix).
        # This path should usually include a trailing slash.
        public: http://example.com/login/
        # Internal prefix in the appservice web server for the login endpoints.
        prefix: /login
        # Shared secret for integration managers such as Dimension.
        # If set to "generate", a random string will be generated on the next startup.
        # If null, integration manager access to the API will not be possible.
        shared_secret: generate

    # Permissions for using the bridge.
    # Permitted values:
    #       user - Use the bridge with puppeting.
    #      admin - Use and administrate the bridge.
    # Permitted keys:
    #        * - All Matrix users
    #   domain - All users on that homeserver
    #     mxid - Specific user
    permissions:
      {}
      #"example.com": "user"
      #"@admin:example.com": "admin"

  # Python logging configuration.
  #
  # See section 16.7.2 of the Python documentation for more info:
  # https://docs.python.org/3.6/library/logging.config.html#configuration-dictionary-schema
  logging:
    version: 1
    formatters:
      colored:
        (): mautrix_hangouts.util.ColorFormatter
        format: "[%(asctime)s] [%(levelname)s@%(name)s] %(message)s"
      normal:
        format: "[%(asctime)s] [%(levelname)s@%(name)s] %(message)s"
    handlers:
      console:
        class: logging.StreamHandler
        formatter: colored
    loggers:
      mau:
        level: DEBUG
      hangups:
        level: INFO
      aiohttp:
        level: INFO
    root:
      level: DEBUG
      handlers: [console]

registration:
  id: hangouts
  as_token:
  hs_token:
  namespaces:
    users:
      - exclusive: true
        regex: "@hangouts_.+:example.org"
        group_id: hangouts:example.org
  url: http://{{ include "mautrix-hangouts.fullname" . }}:29320
  sender_localpart: hangoutsbot
  rate_limited: false
