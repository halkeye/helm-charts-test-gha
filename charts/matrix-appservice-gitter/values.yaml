# Default values for matrix-appservice-gitter.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: matrixdotorg/matrix-appservice-gitter
  tag: latest
  pullPolicy: Always

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 5858

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
  #
## Persist configuration to a persistent volume
persistence:
  ## database data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If unset, storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  enabled: false
  existingClaim:
  storageClassName:
  accessModes:
    - ReadWriteMany
  size: 8Gi

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

config:
  # config.gitter_api_key -- the API key obtained from https://developer.gitter.im/apps
  gitter_api_key:
  # config.matrix_homeserver -- http URL pointing at the homeserver
  matrix_homeserver:
  # config.matrix_external_url -- External url for media
  matrix_external_url:
  # config.matrix_user_domain -- The domain for locally-created users
  matrix_user_domain:
  # config.matrix_admin_room -- the ID of the room created in step 2
  matrix_admin_room:
  # config.data_dir -- The storage location for data files. This should be something like /data for docker.
  data_dir: "/data"
  # config.username_template -- A template to use to generate locally-created usernames. This string must contain ${USER} somewhere inside it.
  username_template: "_gitter_${USER}"
  # config.name_mangling -- A list of rules to define how to generate `usernames` on the gitter side of the relaybot for various patterns of matrix user ID
  name_mangling:
    - pattern: "@irc_(.*):example.com"
      template: "$1 (IRC)"
  # config.logging -- Logging config
  logging:
    console: "debug"
    maxFiles: 1
    files: []

  enable_portals: false
  enable_metrics: true
  alias_template: "gitter_${ROOM}"

registration:
  id: gitter
  # registration.hs_token --
  hs_token:
  # registration.as_token --
  as_token:
  namespaces:
    users:
      - exclusive: true
        regex: '@gitter_.*'
    aliases:
      - exclusive: true
        regex: '#gitter_.*'
    rooms: []
  url:
  sender_localpart: gitterbot
  rate_limited: true
  protocols: null
